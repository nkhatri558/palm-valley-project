/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.geeks.frames;

import com.geeks.beans.CategoryBean;
import com.geeks.beans.ProductBean;
import com.geeks.beans.UserBean;
import com.geeks.dao.CategoryDao;
import com.geeks.dao.ProductDao;
import com.geeks.daoimpl.CategoryDaoImpl;
import com.geeks.daoimpl.ProductDaoImpl;
import com.geeks.util.BarcodeGenerator;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author khatr
 */
public class ProductFrame extends javax.swing.JFrame {

    private UserBean userBean;

    /**
     * Creates new form ProductFrame
     */
    public ProductFrame(UserBean userBean) throws SQLException {
        initComponents();
        this.userBean = userBean;
        populateTable();
        populateCategoryCombo();
        barcodeTxt.setEnabled(false);
        barcodeTxt.setText(this.generateBarcoe());
        addBtn.setEnabled(true);
        updateBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    public String generateBarcoe() {
        ProductDao productDao = new ProductDaoImpl();
        String barcode = BarcodeGenerator.generateBarcode();
        Boolean isMatch = true;
        while (!isMatch) {
            isMatch = productDao.checkBarcode(barcode);
            if (isMatch) {
                barcode = BarcodeGenerator.generateBarcode();
            }
        }
        return barcode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        categoryNameCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        productNameTxt = new javax.swing.JTextField();
        barcodeTxt = new javax.swing.JTextField();
        priceTxt = new javax.swing.JTextField();
        sizeTxt = new javax.swing.JTextField();
        quantityTxt = new javax.swing.JTextField();
        checkCategoryNameLbl = new javax.swing.JLabel();
        checkProductNameLbl = new javax.swing.JLabel();
        checkBarcodeLbl = new javax.swing.JLabel();
        checkPriceLbl = new javax.swing.JLabel();
        checkSizeLbl = new javax.swing.JLabel();
        checkQuantityLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, 910, 680));

        backBtn.setBackground(new java.awt.Color(64, 38, 28));
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        backBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 100, 31));

        clearBtn.setBackground(new java.awt.Color(64, 38, 28));
        clearBtn.setForeground(new java.awt.Color(255, 255, 255));
        clearBtn.setText("Clear");
        clearBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        clearBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        getContentPane().add(clearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 50, 100, 31));

        jLabel7.setBackground(new java.awt.Color(64, 38, 28));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Product");
        jLabel7.setOpaque(true);
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 2, 1370, 40));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Category Name");

        categoryNameCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                categoryNameComboFocusGained(evt);
            }
        });
        categoryNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryNameComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Product Name");

        jLabel3.setText("Barcode");

        jLabel4.setText("Price");

        jLabel5.setText("Size");

        jLabel6.setText("Quantity");

        productNameTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                productNameTxtFocusGained(evt);
            }
        });

        barcodeTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                barcodeTxtFocusGained(evt);
            }
        });

        priceTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceTxtFocusGained(evt);
            }
        });
        priceTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTxtActionPerformed(evt);
            }
        });

        sizeTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sizeTxtFocusGained(evt);
            }
        });

        quantityTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                quantityTxtFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkPriceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBarcodeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkProductNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkCategoryNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(101, 101, 101)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(categoryNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(productNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(barcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(checkSizeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sizeTxt)))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(93, 93, 93)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(checkQuantityLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(quantityTxt)))))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(checkCategoryNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(checkProductNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(checkBarcodeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(checkPriceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(checkSizeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkQuantityLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 450, 430));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/geeks/icons/ADD.png"))); // NOI18N
        addBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/geeks/icons/Update.png"))); // NOI18N
        updateBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/geeks/icons/Delete.png"))); // NOI18N
        deleteBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateBtn)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteBtn)
                .addGap(117, 117, 117))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updateBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteBtn)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, 450, 250));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setOpaque(true);
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 44, 1360, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void priceTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTxtActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        Integer productId = (Integer) productTable.getModel().getValueAt(productTable.getSelectedRow(), 0);
        ProductDao productDao = new ProductDaoImpl();
        ProductBean productBean = productDao.getProductByProductId(productId);
        CategoryDao categoryDao = new CategoryDaoImpl();
        CategoryBean categoryBean = categoryDao.getCategoryById(productBean.getCategory().getCategoryId());
        categoryNameCombo.setSelectedItem(categoryBean.getCategoryName());
        productNameTxt.setText(productBean.getProductName());
        barcodeTxt.setText(productBean.getBarcode());
        priceTxt.setText(productBean.getPrice().toString());
        quantityTxt.setText(productBean.getQuantity().toString());
        sizeTxt.setText(productBean.getSize().toString());
        updateBtn.setEnabled(true);
        deleteBtn.setEnabled(true);
        addBtn.setEnabled(false);
        checkCategoryNameLbl.setText("");
        checkProductNameLbl.setText("");
        checkBarcodeLbl.setText("");
        checkPriceLbl.setText("");
        checkSizeLbl.setText("");
        checkQuantityLbl.setText("");
        
    }//GEN-LAST:event_productTableMouseClicked

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        Boolean isValid = validateFields();
        if (isValid) {
            ProductDao productDao = new ProductDaoImpl();
            CategoryDao categoryDao = new CategoryDaoImpl();
            ProductBean productBean = new ProductBean();
            productBean.setProductName(productNameTxt.getText());
            CategoryBean categoryBean = categoryDao.getCategoyrByName(categoryNameCombo.getSelectedItem().toString());
            productBean.setCategory(categoryBean);
            
            productBean.setBarcode(barcodeTxt.getText());
            productBean.setPrice(Double.parseDouble(priceTxt.getText()));
            productBean.setQuantity(Integer.parseInt(quantityTxt.getText()));
            productBean.setSize(Integer.parseInt(sizeTxt.getText()));
            productBean.setActive("1");
            productBean.setCreatedBy(userBean.getUserId());
            Date date = new Date(System.currentTimeMillis());
            DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String stringDate = sdf.format(date);
            productBean.setCreatedDate(Timestamp.valueOf(stringDate));
            productBean.setModifiedBy(userBean.getUserId());
            productBean.setModifiedDate(Timestamp.valueOf(stringDate));

            Integer row = productDao.addProduct(productBean);
            if (row > 0) {
                try {
                    clearFields();
                    populateTable();
                    barcodeTxt.setText(this.generateBarcoe());
                } catch (SQLException ex) {
                    Logger.getLogger(ProductFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        RestaurantDashboard dashboard = new RestaurantDashboard(userBean);
        dashboard.setVisible(true);
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void categoryNameComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_categoryNameComboFocusGained
        checkCategoryNameLbl.setText("");
    }//GEN-LAST:event_categoryNameComboFocusGained

    private void productNameTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productNameTxtFocusGained
        checkProductNameLbl.setText("");
    }//GEN-LAST:event_productNameTxtFocusGained

    private void barcodeTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_barcodeTxtFocusGained
        checkBarcodeLbl.setText("");
    }//GEN-LAST:event_barcodeTxtFocusGained

    private void priceTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceTxtFocusGained
        checkPriceLbl.setText("");
    }//GEN-LAST:event_priceTxtFocusGained

    private void sizeTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sizeTxtFocusGained
        checkSizeLbl.setText("");
    }//GEN-LAST:event_sizeTxtFocusGained

    private void quantityTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityTxtFocusGained
        checkQuantityLbl.setText("");
    }//GEN-LAST:event_quantityTxtFocusGained

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        Boolean isValid = validateFields();
        if (isValid) {
            Integer productId = (Integer) productTable.getModel().getValueAt(productTable.getSelectedRow(), 0);
            CategoryDao categoryDao = new CategoryDaoImpl();
            ProductDao productDao = new ProductDaoImpl();
            ProductBean productBean = productDao.getProductByProductId(productId);
            productBean.setProductName(productNameTxt.getText());
            CategoryBean categoryBean = categoryDao.getCategoyrByName(categoryNameCombo.getSelectedItem().toString());
            productBean.setCategory(categoryBean);
            productBean.setBarcode(barcodeTxt.getText());
            productBean.setPrice(Double.parseDouble(priceTxt.getText()));
            productBean.setQuantity(Integer.parseInt(quantityTxt.getText()));
            productBean.setSize(Integer.parseInt(sizeTxt.getText()));
            Date date = new Date(System.currentTimeMillis());
            DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String stringDate = sdf.format(date);
            productBean.setModifiedBy(userBean.getUserId());
            productBean.setModifiedDate(Timestamp.valueOf(stringDate));

            Integer row = productDao.updateProduct(productBean);
            if (row > 0) {
                try {
                    clearFields();
                    populateTable();
                    barcodeTxt.setText(this.generateBarcoe());
                } catch (SQLException ex) {
                    Logger.getLogger(ProductFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        Integer productId = (Integer) productTable.getModel().getValueAt(productTable.getSelectedRow(), 0);
        ProductDao productDao = new ProductDaoImpl();
        ProductBean productBean = productDao.getProductByProductId(productId);
        Date date = new Date(System.currentTimeMillis());
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        String stringDate = sdf.format(date);
        productBean.setModifiedBy(userBean.getUserId());
        productBean.setModifiedDate(Timestamp.valueOf(stringDate));
        Integer row = productDao.deleteProduct(productBean);
        if (row > 0) {
            try {
                clearFields();
                populateTable();
                barcodeTxt.setText(this.generateBarcoe());
            } catch (SQLException ex) {
                Logger.getLogger(ProductFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_deleteBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        clearFields();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void categoryNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryNameComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryNameComboActionPerformed

    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        Vector<String> columnNames = new Vector<>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        return new DefaultTableModel(data, columnNames);
    }

    private void populateTable() throws SQLException {
        ProductDao productDao = new ProductDaoImpl();
        productTable.setModel(buildTableModel(productDao.getAllProducts()));
        productTable.removeColumn(productTable.getColumnModel().getColumn(0));
        productTable.removeColumn(productTable.getColumnModel().getColumn(productTable.getColumnCount()-5));
    }

    private void populateCategoryCombo() {
        CategoryDao categoryDao = new CategoryDaoImpl();
        List<CategoryBean> categories = categoryDao.getCategories();
        categoryNameCombo.addItem("Select Category");
        for (CategoryBean categoryBean : categories) {
            categoryNameCombo.addItem(categoryBean.getCategoryName());
        }
    }

    private void clearFields() {
        categoryNameCombo.setSelectedIndex(0);
        productNameTxt.setText("");
        barcodeTxt.setText("");
        priceTxt.setText("");
        sizeTxt.setText("");
        quantityTxt.setText("");
        addBtn.setEnabled(true);
        updateBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
    }

    private Boolean validateFields() {
        Boolean isValid = true;
        if (categoryNameCombo.getSelectedIndex() == 0) {
            isValid = false;
            checkCategoryNameLbl.setText("*Select Category");
        }
        if (productNameTxt.getText().trim().isEmpty()) {
            isValid = false;
            checkProductNameLbl.setText("*Empty Field");
        }
        if (barcodeTxt.getText().trim().isEmpty()) {
            isValid = false;
            checkBarcodeLbl.setText("*Empty Field");
        }
        if (priceTxt.getText().trim().isEmpty()) {
            isValid = false;
            checkPriceLbl.setText("*Empty Field");
        }
        if (sizeTxt.getText().trim().isEmpty()) {
            isValid = false;
            checkSizeLbl.setText("*Empty Field");
        }
        if (quantityTxt.getText().trim().isEmpty()) {
            isValid = false;
            checkQuantityLbl.setText("*Empty Field");
        }
        return isValid;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField barcodeTxt;
    private javax.swing.JComboBox<String> categoryNameCombo;
    private javax.swing.JLabel checkBarcodeLbl;
    private javax.swing.JLabel checkCategoryNameLbl;
    private javax.swing.JLabel checkPriceLbl;
    private javax.swing.JLabel checkProductNameLbl;
    private javax.swing.JLabel checkQuantityLbl;
    private javax.swing.JLabel checkSizeLbl;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JTextField productNameTxt;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField quantityTxt;
    private javax.swing.JTextField sizeTxt;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
